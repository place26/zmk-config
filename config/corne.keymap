/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

#define BASE   0
#define LOWER  1
#define RAISE  2
#define ADJUST 3

// Home row mods macro
#define HRML(k1,k2,k3,k4) &mt LGUI k1  &mt LALT k2  &mt LCTRL k3  &mt LSHFT k4
#define HRMR(k1,k2,k3,k4) &mt RSHFT k1  &mt RCTRL k2  &mt RALT k3  &mt RGUI k4

&mt {
    compatible = "zmk,behavior-hold-tap";
    quick-tap-ms = <100>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <170>;
};

&lt {
    tapping-term-ms = <240>;
    flavor = "balanced";
    quick-tap-ms = <150>;
};

/ {
    combos {
            compatible = "zmk,combos";
    };

    macros {
        input_switch: input_switch {
            label = "KOR-EN";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press &kp LCTL>, <&macro_tap &kp SPACE>, <&macro_release &kp LCTL>;
        };

        input_switch_alt: input_switch_alt {
            label = "KOR-CN";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings 
                = <&macro_press &kp LCTL &kp LALT>
                , <&macro_tap &kp SPACE>
                , <&macro_release &kp LCTL &kp LALT>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            bindings = <
&kp GRAVE  &kp Q    &kp W    &kp E   &kp R   &kp T       &kp Y    &kp U    &kp I     &kp O     &kp P      &kp BSPC
&kp LSHFT  HRML(A,  S,       D,      F)      &kp G       &kp H    HRMR(J,  K,        L,        SEMI)      &kp SQT
&kp LSHFT  &kp Z    &kp X    &kp C   &kp V   &kp B       &kp N    &kp M    &kp COMMA &kp DOT   &kp FSLH   &kp BSLH
        &tog ADJUST   &mt LCTL SPACE  &lt RAISE TAB      &lt LOWER SPACE   &mt LALT SPACE  &mt LGUI ENTER
            >;
        };

        lower_layer {
            bindings = <
&none       &none       &kp SLASH  &kp KP_N7   &kp KP_N8   &kp KP_N9            &kp ESC              &kp LBRC    &kp RBRC    &none       &kp DQT     &none
&none       &kp EQUAL   &kp ASTRK  &kp KP_N4   &kp KP_N5   &kp KP_N6            &input_switch        &kp LPAR    &kp RPAR    &none       &kp SQT     &none
&kp COMMA   &kp DOT     &none      &kp KP_N1   &kp KP_N2   &kp KP_N3            &input_switch_alt    &kp LBKT    &kp RBKT    &kp GRAVE   &kp TILDE   &none
                                 &kp KP_MINUS  &kp KP_PLUS &kp KP_N0            &trans      &trans      &trans
            >;
        };

        raise_layer {
            bindings = <
&none   &kp EXCL   &kp AT      &kp HASH    &kp DLLR    &kp PRCNT                &kp HOME    &kp PG_UP   &kp END     &kp PG_DN   &none  &kp BSPC
&none   &kp CARET  &kp AMPS    &kp ASTRK   &kp MINUS   &kp UNDER                &kp LEFT    &kp DOWN    &kp UP      &kp RIGHT   &kp UP  &kp GRAVE
&none   &none      &none       &none       &none       &kp LA(SPACE)            &kp DEL     &kp BSPC    &none       &kp LEFT    &kp DOWN   &kp RIGHT
                                    &trans      &trans      &trans              &input_switch   &trans     &trans
            >;
        };

        adjust_layer {
            bindings = <
&kp F1      &kp F2       &kp F3       &kp F4       &kp F5        &kp F6         &kp F7      &kp F8      &kp F9      &kp F10     &kp F11    &kp F12
&none       &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3  &bt BT_SEL 4   &kp LEFT    &kp DOWN    &kp UP      &kp RIGHT   &kp UP     &kp GRAVE
&bt BT_CLR  &none        &none        &none        &none         &none          &none       &none       &none       &kp LEFT    &kp DOWN   &kp RIGHT
                             &tog ADJUST      &trans      &trans                &none       &none       &none
            >;
        };        
    };
};
