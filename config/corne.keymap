#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

#define BASE   0
#define LOWER  1
#define RAISE  2
#define ADJUST 3
#define NUMERIC 4

&mt {
    label = "HOMEROW_MODS";
    compatible = "zmk,behavior-hold-tap";
    flavor = "tap-preferred";
    quick-tap-ms = <125>;
    tapping-term-ms = <200>;
};

&lt {
    tapping-term-ms = <240>;
    flavor = "balanced";
    quick-tap-ms = <150>;
};

/ {
    conditional_layers { compatible = "zmk,conditional-layers"; };

    combos {
        compatible = "zmk,combos";

        combo_home {
            timeout-ms = <50>;
            key-positions = <39 20 31>; // 양쪽 가장자리 키
            bindings = <&home_key>;
            layers = <0>; // 모든 레이어에서 작동
        };

        enter_combo {
            bindings = <&kp ENTER>;
            key-positions = <13 12 11>;
            timeout-ms = <70>;
            require-prior-idle-ms = <100>;
        };

        enter_right_combo {
            bindings = <&kp ENTER>;
            key-positions = <16 18 17>;
            timeout-ms = <70>;
            require-prior-idle-ms = <100>;
        };
    };

    behaviors {
        home_key: home_key {
            compatible = "zmk,behavior-macro";
            label = "HOME_KEY";
            #binding-cells = <0>;
            bindings = <&macro_tap>, <&to BASE>;
        };    
        caps_word: caps_word {
            compatible = "zmk,behavior-caps-word";
            label = "CAPS_WORD";
            #binding-cells = <0>;
            continue-list = <UNDERSCORE MINUS BACKSPACE DELETE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    macros {
    };    

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            bindings = <
&kp GRAVE   &kp Q       &kp W       &kp E             &kp R         &kp T               &kp Y            &kp U           &kp I           &kp O       &kp P          &kp BSPC
&kp LSHFT   &mt LGUI A  &mt LALT S  &mt LCTRL D       &mt LSHFT F   &kp G               &kp H            &mt RSHFT J     &mt RCTRL K     &mt RALT L  &mt RGUI SEMI  &kp SQT
&kp LSHFT   &kp Z       &kp X       &kp C             &kp V         &kp B               &kp N            &kp M           &kp COMMA       &kp DOT     &kp FSLH       &kp BSLH
                           &lt ADJUST ENTER  &mt LCTL ESC  &lt RAISE TAB                &lt LOWER SPACE  &mt LALT SPACE  &mt LGUI ENTER
            >;
        };

        lower_layer {
            bindings = <
&none       &none       &kp SLASH   &kp KP_N7       &kp KP_N8       &kp KP_N9           &kp ESC            &kp LBRC         &kp RBRC        &kp LT      &kp DQT      &none
&none       &kp EQUAL   &kp ASTRK   &kp KP_N4       &kp KP_N5       &kp KP_N6           &kp LC(SPACE)      &kp LPAR         &kp RPAR        &kp GT      &kp SQT      &none
&kp COMMA   &kp DOT     &kp KP_N0   &kp KP_N1       &kp KP_N2       &kp KP_N3           &kp LC(LS(SPACE))  &kp LBKT         &kp RBKT        &kp GRAVE   &kp TILDE    &none
                                         &kp KP_MINUS  &kp KP_PLUS  &kp KP_N0           &trans    &kp LT    &kp GT
            >;
        };

        raise_layer {
            bindings = <
&none       &kp EXCL              &kp AT                &kp HASH    &kp DLLR      &kp PRCNT          &kp HOME   &kp PG_UP    &kp END     &kp PG_DN     &none       &none
&none       &kp CARET             &kp AMPS              &kp ASTRK   &kp MINUS     &kp UNDER          &kp LEFT   &kp DOWN     &kp UP      &kp RIGHT     &kp UP      &none
&none       &kp LG(LS(NUMBER_3))  &kp LG(LS(NUMBER_4))  &none       &none         &kp LA(SPACE)      &kp DEL    &kp BSPC     &none       &kp LEFT      &kp DOWN    &kp RIGHT
                                                        &kp ENTER  &mt LCTL ESC  &lt RAISE TAB       &kp LC(SPACE)      &trans   &tog NUMERIC
            >;
        };

        adjust_layer {
            bindings = <
&none       &bootloader   &sys_reset    &none           &none         &none             &kp F1      &kp F2      &kp F3      &sys_reset  &bootloader  &none
&none       &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2    &bt BT_SEL 3  &bt BT_SEL 4      &kp F4      &kp F5      &kp F6      &none       &none        &none
&none       &bt BT_CLR    &none         &none           &none         &none             &kp F7      &kp F8      &kp F9      &kp F10     &kp F11      &kp F12
                                             &lt ADJUST ENTER  &none  &none             &caps_word  &none   &none
            >;
        };        

        numeric_layer {    
            bindings = <
&none       &none      &kp SLASH    &kp KP_N7     &kp KP_N8    &kp KP_N9            &none       &none       &none       &none       &none       &none
&none       &kp EQUAL  &kp ASTRK    &kp KP_N4     &kp KP_N5    &kp KP_N6            &kp LEFT    &kp DOWN    &kp UP      &kp RIGHT   &kp UP      &none
&kp COMMA   &kp DOT    &kp KP_N0    &kp KP_N1     &kp KP_N2    &kp KP_N3            &none       &none       &none       &kp LEFT    &kp DOWN    &kp RIGHT
                                    &kp KP_MINUS  &kp KP_PLUS  &kp KP_N0            &trans    &trans    &tog NUMERIC
            >;
        };
    };
};
